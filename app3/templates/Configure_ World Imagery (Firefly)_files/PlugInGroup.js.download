define([
    "dojo/_base/declare",
    "dojo/_base/lang",
    "dojo/_base/array",
    "dojo/promise/all",
    "dojo/i18n!configure/nls/resources"
  ],
  function (declare,
    lang,
    array,
    promise,
    i18n
  ) {
    var GroupPlugin = declare("configure.PlugInGroup", null, {
      //Example of custom template that shows on panel when you click thumbnail
      infoPanelTemplate: "<div>" +
        "<div class=\"template-info-showing\">" +
        "<div class=\"thumbnail\">" +
        "<img src=\"${item:_formatInfoPanelImage}\">" +
        "</div>" +
        "<h4>${item.title}</h4>" +
        "<div class=\"template-info\">" +
        "<p class=\"quiet-scroll\">${item.snippet}</p>" +
        "</div>" +
        "</div>" +
        "<div class=\"panel-actions\">" +
        "<button class=\"btn blue btn-main\" id=\"group\">" + i18n.configure.mapdlg.select + "</button>" +
        "<button class=\"btn btn-cancel\" id=\"close-panel\">" + i18n.configure.mapdlg.close + "</button>" +
        "</div>" +
        "<div>",
      filters: {
        all: {}
      },
      filterStrings: {
        all: {
          title: i18n.configure.mapdlg.items.allLabel
        }
      },
      constructor: function (parameters) {
        lang.mixin(this, parameters);
        // Add filters for the user and the organization if applicable.
        var portalParams = {};
        if (parameters.parent && parameters.parent.plugInParams) {
          portalParams = parameters.parent.plugInParams;
        }

        if (portalParams.user && portalParams.user.username) {
          var userNameFilter = {
            "owners": [portalParams.user.username]
          };
          var userNameFilterString = {
            "title": i18n.configure.mapdlg.items.contentLabel
          };
          this.filters.content = userNameFilter;
          this.filterStrings.content = userNameFilterString;
        }
        if (portalParams.user && portalParams.user.orgId) {
          var orgIdFilter = {
            "orgids": [portalParams.user.orgId]
          };
          var orgIdFilterString = {
            "title": portalParams.portal.name || i18n.configure.mapdlg.items.organizationLabel
          };
          this.filters.orgid = orgIdFilter;
          this.filterStrings.orgid = orgIdFilterString;
        }

      },
      fetchData: function () {
        return this._fetchGroups();
      },
      _fetchGroups: function () {
        var groupQueryParams = {
          "query": "access:\"public\" OR access:\"private\"  OR access:\"org\" OR access:\"shared\""
        };
        return this.parent._fetchItems(groupQueryParams);
      }
    });
    // All plugins must implement these functions regardless of their
    // internal architecture.
    lang.mixin(GroupPlugin, {
      // Called by PluginTarget.addPlugin
      add: function (browseItemsDlg, options) {
        if (!browseItemsDlg.plugIn) {
          var parameters = options || {};
          parameters.parent = browseItemsDlg;
          browseItemsDlg.plugIn = new GroupPlugin(parameters);
        }
      },
      // Called by PluginTarget.removePlugin
      remove: function (browseItemsDlg) {
        if (browseItemsDlg.plugIn) {
          browseItemsDlg.plugIn.destroy();
          delete browseItemsDlg.plugIn;
        }
      }
    });
    return GroupPlugin;
  });