define([
        "esri/layers/FeatureLayer",
        "dojo/_base/lang",
        "dojo/i18n!configure/nls/resources"
    ],
    function (
        FeatureLayer,
        lang,
        bundle
    ) {

        var conditionUtils = {
            data: null,
            i18n: bundle.configure,
            conditionErrors: [],
            exists: function (type) {
                var typeExists = false;
                if (this.data) {
                    switch (type) {
                        case "widgets":
                            if (this.exists("itemData") && this.data.itemInfo.itemData.widgets) {
                                typeExists = true;
                            }
                            break;
                        case "operationalLayers":
                            if (this.exists("itemData") && this.data.itemInfo.itemData.operationalLayers) {
                                typeExists = true;
                            }
                            break;
                        case "itemData":
                            if (this.data.itemInfo && this.data.itemInfo.itemData) {
                                typeExists = true;
                            }
                            break;
                        default:
                            typeExists = false;
                            break;
                    }
                }
                return typeExists;
            },
            hasTime: function () {
                var timeAware = false;
                if (this.exists("widgets")) {
                    if (this.data.itemInfo.itemData.widgets.timeSlider) {
                        return true;
                    }
                }
                return timeAware;
            },

            hasEdits: function () {
                var found = false;
                if (this.exists("operationalLayers")) {
                    this.data.itemInfo.itemData.operationalLayers.some(function (layer) {
                        if (layer && layer.layerObject) {
                            var eLayer = layer.layerObject;
                            if (eLayer instanceof FeatureLayer) {
                                if (eLayer.isEditable()) {
                                    found = true;
                                    return true;
                                }
                            }
                        }
                    });
                }
                return found;
            },
            hasWebGL: function () {
                const canvas = document.createElement("canvas");
                const gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
                if (gl && gl instanceof WebGLRenderingContext) {
                    return true
                } else {
                    return false;
                }
            },
            has4x: function () {
                /* Check for 4x unsupported content
                 * labelling 8%
                 * no version 4%
                 * KML 0.8%
                 * WFS 0.1%
                 * time <0.1% (edited)
                 * https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/9628
                 * appid for above 75cb5231c60f4aa581799f2043be4717
                 */
                var has4xContent = false;

                if (this.exists("operationalLayers")) {
                    // todo remove line labels if webgl is enabled 
                    this.data.itemInfo.itemData.operationalLayers.some(lang.hitch(this, function (layer) {

                        if (layer.layerType && layer.layerType === "WFS") {
                            has4xContent = true;
                            return true;
                        }
                        if (layer.hasOwnProperty("labelingInfo") || layer.layerDefinition && layer.layerDefinition.drawingInfo && layer.layerDefinition.drawingInfo.labelingInfo) {
                            if (!this.hasWebGL()) {
                                has4xContent = true;
                                return true;
                            } else {
                                const labelInfo = layer.labelingInfo || layer.layerDefinition.drawingInfo.labelingInfo;
                                labelInfo.some(function (label) {
                                    // if webgl is false or if labels are points
                                    if (label.labelPlacement && label.labelPlacement.indexOf("Line") !== -1) {
                                        has4xContent = true;
                                        return true;
                                    }
                                });
                            }

                        }
                        if (layer.featureCollection && layer.featureCollection.layers) {
                            //multi layer feature collection
                            has4xContent = true;
                            return true;
                        }
                    }));
                }
                if (this.exists("itemData")) {
                    if (!this.data.itemInfo.itemData.version) {
                        has4xContent = true;
                    }

                }
                return has4xContent;
            },

            hasFilter: function () {
                var found = false;
                if (this.exists("operationalLayers")) {
                    this.data.itemInfo.itemData.operationalLayers.some(lang.hitch(this, function (layer) {
                        if (layer.definitionEditor) {
                            found = true;
                            return true;
                        } else if (layer.layers) {
                            //Check ArcGISDynamicMapService layers for filters
                            layer.layers.forEach(layer.layers, function (sublayer) {
                                if (sublayer.definitionEditor) {
                                    found = true;
                                    return true;
                                }
                            });
                        } else if (layer.layerDefinition && layer.itemId) {
                            //is there an associated item in the web map response
                            if (this.data.itemInfo && this.data.itemInfo.relatedItemsData && this.data.itemInfo.relatedItemsData[layer.itemId]) {
                                var item = this.data.itemInfo.relatedItemsData[layer.itemId];
                                if (item.definitionEditor) {
                                    found = true;
                                    return true;
                                }
                            }
                        }
                    }));
                }
                return found;
            },
            hasFeatureLayer: function () {
                var found = false;
                if (this.exists("operationalLayers")) {
                    this.data.itemInfo.itemData.operationalLayers.some(function (layer) {
                        if (layer.layerType && layer.layerType === "ArcGISFeatureLayer") {
                            found = true;
                            return true;
                        }
                    });
                }
                return found;
            },

            hasImageLayer: function () {
                var found = false;
                if (this.exists("operationalLayers")) {
                    this.data.itemInfo.itemData.operationalLayers.some(function (layer) {
                        if (layer.layerType && (layer.layerType === "ArcGISImageServiceLayer" || layer.layerType === "ArcGISTiledImageServiceLayer")) {
                            found = true;
                            return true;
                        }
                    });
                }
                return found;
            },
            hasBookmarks: function () {
                var found = false;
                if (this.exists("itemData") && this.data.itemInfo.itemData.bookmarks && this.data.itemInfo.itemData.bookmarks.length && this.data.itemInfo.itemData.bookmarks.length > 0) {
                    found = true;
                }
                return found;
            },
            evalBooleanCondition: function (condition) {
                var meetsCondition = false;
                if (condition === "bookmark") {
                    meetsCondition = this.hasBookmarks();
                }
                return meetsCondition;
            },
            evalWebMapConditions: function (conditions) {
                this.conditionErrors = [];
                // TODO come up with strings and localize them
                conditions.forEach(lang.hitch(this, function (condition) {
                    if (condition === "featurelayer") {
                        if (!this.hasFeatureLayer()) {
                            this.conditionErrors.push(this.i18n.conditions.featureLayer);
                        }
                    }
                    if (condition === "imagelayer") {
                        if (!this.hasImageLayer()) {
                            this.conditionErrors.push(this.i18n.conditions.imageLayer);
                        }
                    }
                    if (condition === "time") {
                        if (!this.hasTime()) {
                            this.conditionErrors.push(this.i18n.conditions.time);
                        }
                    }
                    if (condition === "filter") {
                        if (!this.hasFilter()) {
                            this.conditionErrors.push(this.i18n.conditions.filter);
                        }
                    }
                    if (condition === "edit") {
                        if (!this.hasEdits()) {
                            this.conditionErrors.push(this.i18n.conditions.edit);
                        }
                    }
                    if (condition === "4x") {
                        if (this.has4x()) {
                            this.conditionErrors.push(this.i18n.conditions.version4);
                        }
                    }
                }));
            }
        };

        return conditionUtils;
    });